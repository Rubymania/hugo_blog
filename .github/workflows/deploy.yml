# hugo blog to github pages
name: Deploy Hugo Blog to GitHub Pages 

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때마다 워크플로우 실행

# GitHub Pages 배포를 위한 권한 설정 (최상위 레벨에 위치해야 함)
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: # Pages 배포를 위한 환경 설정 (필수!)
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true # 필수: 서브모듈(테마)이 있는 경우 이걸 true로 해야 함
          fetch-depth: 0   # 모든 기록을 가져와야 하는 경우

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest' # 최신 Hugo 버전 사용
          extended: true         # Blowfish 테마는 extended 버전 필요

      - name: Build Hugo site
        # 1. '--buildFuture'를 제거하고 hugo.toml의 설정을 사용
        # 2. '--cleanDestinationDir'을 추가하여 이전 public 디렉토리를 완전히 정리
        # 3. 'hugo --minify'는 이미 hugo.toml에 minify: true 설정이 있다면 생략 가능
        #    Blowfish 테마는 minify 기능이 내장되어 있어 플래그 없이도 작동할 수 있음
        run: hugo -D --cleanDestinationDir
        
      - name: Upload artifact # 빌드된 사이트 파일을 아티팩트로 업로드
        uses: actions/upload-pages-artifact@v3 # GitHub Pages 액션에서 사용할 수 있도록
        with:
          path: ./public # public 폴더 내용을 업로드 (Hugo 빌드 결과물)

      - name: Deploy to GitHub Pages # Pages 배포 서비스에 아티팩트 연결
        id: deployment
        uses: actions/deploy-pages@v4 # GitHub에서 제공하는 공식 Pages 배포 액션
